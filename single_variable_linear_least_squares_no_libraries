import matplotlib.pyplot as plt

# 1) Input

x = [1714,1664,1760,1685,1693,1670,1764,1764,1792,1850,1735,1775,1735,1712,1773,1872,1755,1674,1842,1786,1761,1722,1663,1687,1974,1826,1787,1821,2020,1794,1769,1934,1775,1855,1880,1849,1808,1954,1777,1831,1865,1850,1966,1702,1990,1925,1824,1956,1857,1979,1802,1855,1907,1634,1879,1887,1730,1953,1781,1891,1964,1808,1893,2041,1893,1832,1850,1934,1861,1931,1933,1778,1975,1934,2021,2015,1997,2020,1843,1936,1810,1987,1962,2050]
y = [2.4,2.52,2.54,2.74,2.83,2.91,3,3,3.01,3.01,3.02,3.07,3.08,3.08,3.12,3.17,3.17,3.17,3.17,3.19,3.19,3.19,3.2,3.21,3.24,3.28,3.28,3.28,3.28,3.28,3.28,3.28,3.29,3.29,3.29,3.31,3.32,3.34,3.37,3.37,3.37,3.38,3.38,3.39,3.39,3.4,3.4,3.4,3.41,3.41,3.41,3.42,3.42,3.42,3.44,3.47,3.47,3.47,3.47,3.48,3.49,3.49,3.5,3.51,3.51,3.52,3.52,3.54,3.58,3.58,3.59,3.59,3.6,3.6,3.61,3.62,3.64,3.65,3.71,3.71,3.71,3.73,3.76,3.81]

# 2) Output

# 2.0) Lenght

n = len(x) 

# 2.1) Arithmetic Mean

x_mean = sum(x) / n
y_mean = sum(y) / n

# 2.2) Variability

Sxx = sum([(i - x_mean) ** 2 for i in x])  # sum of the squares of the difference between each xi and x_mean
Syy = sum([(i - y_mean) ** 2 for i in y])  # sum of the squares of the difference between each yi and y_mean
Sxy = sum([(i - x_mean) * (j - y_mean) for i, j in zip(x, y)])  # sum of the product of (xi - x_mean) * (yi - y_mean)

# 2.3) Variance

x_variance = Sxx / n
y_variance = Syy / n

# 2.4) Standard deviation

x_std = x_variance ** 0.5
y_std = y_variance ** 0.5

# 2.5) Covariance

Covariance = Sxy / n

# 2.6) Regression line (y = b0 + b1 * x + ϵ)

b1 = Sxy / Sxx
b0 = y_mean - b1 * x_mean
y_predicted = [b0 + b1 * i for i in x]

# 2.7) Sum of squares
# OBS: SST = SSR + SSE

sumsOfSquaresTotal = Syy # SST or TSS, measures the amount of variability inherent in the response before the regression is performed
sumsOfSquaresRegression = sum([(i - y_mean) ** 2 for i in y_predicted]) # SSR, measures the amount of variability in the response explained performing the regression
sumsOfSquaresError = sum([(i - j) ** 2 for i, j in zip(y, y_predicted)]) # SSE or RSS, measures the amount of variability in the response that is left unexplained after performing the regression
sumsOfAbsolutesError = sum([abs(i - j) for i, j in zip(y, y_predicted)]) # SSA
errorVariance = sumsOfSquaresError / (n - 2)
errorStandardDeviation = errorVariance ** 0.5 # RSE (Residual Standard Error), estimate of the standard deviation of ϵ

# 2.8) Assessing the Accuracy of the Model

meanSquaredError = sumsOfSquaresError / n # MSE
rootMeanSquaredError = meanSquaredError ** 0.5 # RMSE
meanAbsoluteError = sumsOfAbsolutesError / n # MAE
pearsonCoefficient = Covariance / (x_std * y_std)
R_squared = (sumsOfSquaresRegression) / Syy # R², proportion of variability in Y that can be explained using X
R_squared_adjusted = 1 - (1 - R_squared) * (n - 1) / (n - 2)
F_statistic = sumsOfSquaresRegression / errorVariance 

# 2.9) Assessing the Accuracy of the Coefficient Estimates
# The following functions will be used to determine p-value

def normal(x, mu, sigma):
    """
    Function used to determine the probability density of normal distribution
    :param x: Input
    :param mu: Mean of the distribution
    :param sigma: Standard deviation
    :return: Probability density of normal distribution
    """
    e = 2.71828182845904523536
    pi = 3.1415926535897932384

    nominator = e**(- ((x - mu)**2) / (2 * sigma**2))
    denominator = (sigma * (2 * pi)**0.5)
    return nominator / denominator

def integrate_normal(a, b, n, mu, sigma):
    """
    Function used to determine the integral (area) of the probability density of normal distribution
    using the middle method in the interval [a, b]
    :param a: Start point of the interval [a, b]
    :param b: End point of interval [a, b]
    :param n: Number of divisions of interval [a, b]
    :param mu: Mean of the distribution
    :param sigma: Standard deviation of the distribution
    :return: Area between [a, b], output in decimals (0.4 not 40 %)
    """
    dx = float(b-a)/n
    area = 0
    midpoint = a + (dx/2)

    for i in range(n):
        area += normal(midpoint, mu, sigma) * dx
        midpoint += dx
    return area

variance_b0 = errorVariance * ((1 / n) + ((x_mean ** 2) / Sxx)) # Variance of b0
standardDeviation_b0 = variance_b1 ** 0.5 # Standard Deviation of b0
variance_b1 = errorVariance / Sxx # Variance of b1
standardDeviation_b1 = variance_b1 ** 0.5 # Standard Deviation of b1
b0_confidenceIntervalLeft = round(b0 - 2 * standardDeviation_b0 ** 0.5, 2)
b0_confidenceIntervalRight = round(b0 + 2 * standardDeviation_b0 ** 0.5, 2)
b1_confidenceIntervalLeft = round(b1 - 2 * standardDeviation_b1 ** 0.5, 2)
b1_confidenceIntervalRight = round(b1 + 2 * standardDeviation_b1 ** 0.5, 2)
percent_95_confidenceInterval_b0 = [b0_confidenceIntervalLeft, b0_confidenceIntervalRight]
percent_95_confidenceInterval_b1 = [b1_confidenceIntervalLeft, b1_confidenceIntervalRight]
t_statistic_b0 = b0 / standardDeviation_b0
t_statistic_b1 = b1 / standardDeviation_b1
p_value_b0 = 0.5 - integrate_normal(0, t_statistic_b0, 1000, 0, standardDeviation_b0) # number describing how likely it is that your data would have occurred by random chance and b0 = 0
p_value_b1 = 0.5 - integrate_normal(0, t_statistic_b1, 1000, 0, standardDeviation_b1) # number describing how likely it is that your data would have occurred by random chance and b1 = 0

# 3) Plotting

plt.scatter(x, y)
fig = plt.plot(x, y_predicted, lw=4, c='orange', label='regression line')
plt.xlabel('x')
plt.ylabel('y')
plt.show()

# 4) Results

print('x_mean = ', x_mean)
print('x_variance = ', x_variance)
print('x_std = ', x_std)
print('y_mean = ', y_mean)
print('y_variance = ', y_variance)
print('y_std = ', y_std)
print('Sxx = ', Sxx)
print('Syy = ', Syy)
print('Sxy = ', Sxy)
print('Covariance = ', Covariance)
print('b0 = ', b0)
print('b1 = ', b1)
print('Sum of Squares Total = ', Syy)
print('Sum of Squares Regression = ', sumsOfSquaresRegression)
print('Sum of Squares Error = ', sumsOfSquaresError)
print('Sum of Absolutes Error = ', sumsOfAbsolutesError)
print('Residual Standard Error = ', errorStandardDeviation)
print('Standard Error b0 = ', standardDeviation_b0)
print('Standard Error b1 = ', standardDeviation_b1)
print('95 % Confidence Interval for b0 = ', percent_95_confidenceInterval_b0)
print('95 % Confidence Interval for b1 = ', percent_95_confidenceInterval_b1)
print('t-statistic for b0 = ', t_statistic_b0)
print('t-statistic for b1 = ', t_statistic_b1)
print('P-value for b0 = ', p_value_b0)
print('P-value for b1 = ', p_value_b1)
print('Mean Squared Error = ', meanSquaredError)
print('Root Mean Squared Error = ', rootMeanSquaredError)
print('Mean Absolute Error = ', meanAbsoluteError)
print('Pearson correlation coefficient = ', pearsonCoefficient)
print('R_squared = ', R_squared)
print('R_squared_adjusted = ', R_squared_adjusted)
print('F_statistic = ', F_statistic)

